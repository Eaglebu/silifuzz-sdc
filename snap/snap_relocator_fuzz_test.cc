// Copyright 2022 The SiliFuzz Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstring>

#include "gtest/gtest.h"
#include "fuzztest/fuzztest.h"
#include "./snap/snap_relocator.h"
#include "./util/mmapped_memory_ptr.h"

namespace silifuzz {
namespace {
using ::fuzztest::Arbitrary;

void RelocateRandomBytes(const std::string& bytes) {
  MmappedMemoryPtr<char> relocatable;
  if (bytes.empty()) {
    relocatable = MakeMmappedMemoryPtr<char>(nullptr, 0);
  } else {
    relocatable = AllocateMmappedBuffer<char>(bytes.size());
    memcpy(relocatable.get(), bytes.data(), bytes.size());
  }

  // This should not crash.
  SnapRelocator::Error error;
  auto corpus = SnapRelocator::RelocateCorpus(std::move(relocatable), &error);
}

constexpr size_t kMaxRandomCorpusSize = 1 << 16;

FUZZ_TEST(SnapRelocatorTest, RelocateRandomBytes)
    .WithDomains(Arbitrary<std::string>().WithMaxSize(kMaxRandomCorpusSize));

TEST(SnapRelocatorTest, RelocateRandomBytesRegression_b256273372) {
  RelocateRandomBytes(std::string(
      "\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\343\236\236\236"
      "\236\236\236\236\236\236\236\236\236\236\236\236&&&",
      51));
}

TEST(SnapRelocatorTest, RelocateRandomBytesRegression_b256297703) {
  RelocateRandomBytes(std::string(
      "\007\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020",
      33));
}

TEST(FuzzDecodedInsn, RelocateRandomBytesRegression_b257806352) {
  RelocateRandomBytes(std::string(
      "\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\263\263"
      "\263\263\263\263\020\000\000\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\"\000\000\000\000\000\000\000\327\327\327\327\327$$$$$$$$$$"
      "\013\000\000\000\242\002\271\3037\204@\001\003_\035ll??\236??????"
      "\261llllolll\000]"
      "\000\000\000\000\264\000\000\000\000\000\000\327\327\327\327\327\327\000"
      "\242\002\271\3037\204@\001\003_\035ll????????"
      "\261lll\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\020\000\263\263\000`"
      "\206\004\020\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\025\332R3<"
      "\027LU\226\312T\000\224\347\347\347\347\347\347\347\347\235I\002\221w"
      "\005`\206\004\020@"
      "\014\004\331\026eu\002\000\"\000\000\000\000\000\000\000\000\000\264\000"
      "\000\000\000\000\000\327\327\327\327\327\327\000\242\002\271\3037\204@"
      "\001\003_\035ll?*\000\000\000??\215\215\215\215\215\215\215?????"
      "\261llllolll\000]\000\000\000\000\327\327\327\327\327\327$$$$$$$$$$$$"
      "\327\000\242\002\271\3037\204@\001\003_\035ll??\236??????"
      "\261llllolll\000]\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\025\331R3<"
      "\027LU\226\312T\000\224\235I\002)w\005`\206\004\020@"
      "\014\004\331\026eu\002\000\"\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\327\327\327\327\327\327\327\000\242\002\271\3037\204@"
      "\001\003_\035ll????????\261llllolll\000]"
      "\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\356\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      "\327\327\327\327\327\327\327\000\242\002\271\3037\204@\001\003_\035ll???"
      "?????\261llllolll\000]\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\036\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\023\331R3<"
      "\027LU\226\312T\000\224\235I\002)w\005`\206\004\020@"
      "\014\004\331\026u\002\000\"\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\327\327\327\327\327\327\327\000\242\002\271\3037\204@"
      "\001\003_\035ll????????\261llllolll\000]"
      "\000\000\001\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\000\000\000\000\327\327\327\327\327\327$$$$$$$$$$$$"
      "\327\000\242\002\271\3037\204@\001\003_\035ll??\236??????"
      "\261llllolll\000]\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\025\331R3<"
      "\027LU\226\312T\000\224\235I\002)w\005`\206\004\020@"
      "\014\004\331\026eu\002\000\"\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\327\327\327\327\327\327\327\000\242\002\271\3037\204@"
      "\001\003_\035ll????????\261llllolll\000]"
      "\020\000\000\000\000\000\000\000 "
      "\000\000\202\325\0200\010\323\200\003\3702\020o\375\"\020\000\356\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\327\327"
      "\327\327\327\327\327\000\242\002\271\3037\204@\001\003_\035ll????????"
      "\261llllolll\000M\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\025\331R3<"
      "\027LU\226\312T\000\224\235I\002)w\005`\206\004\020@"
      "\014\004\331\026u\002\000\"\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\327\327\327\327\327\327\327\000\242\002\271\3037\204@"
      "\001\003_\035ll????????\261llllolll\000]\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\020\000\000.\231\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\025\331R3<"
      "\027LU\226\312T\000\224\235I\002)w\005`\206\004\020@"
      "\014\004\331\026eu\002\000\"\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\327\327\327\327\327\327\327\000\312\312\242\002\271\303"
      "7\204@\001\003_\035ll????????\261llllolll\000]"
      "\205\205\205\205\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\356\000\000\000\000\000\000\000\000\000\000\000\000\000\025\331R3<"
      "\027LU\226\312T\000\224\235I\002)w\005`\206\004\020@"
      "\014\004\331\026eu\002\000\"\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\327\327\327\327\327\327\327\000\242\002\271\3037\204@"
      "\001\003_\035ll???;\\\277\220\000&\000\000p,\003)[k\001]"
      "\020\000\000\000\000\000\000\000 "
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000"
      "\000\000\000\000\000\000\000\000\000\000\000\000\000\025\331R3<"
      "\027LU\226\312T\000\224\235I\002)w\005`\206\004\020@"
      "\014\004\331\026u\002\000\"\000\000\000\000\000\000\000\000\000\000\000"
      "\000\000\000\000\327\327\327\327\327\327\327\000\242\002\271\3037\204@"
      "\001\003_\035ll????????\261llllolll\000]lolll\000]",
      1600));
}

}  // namespace
}  // namespace silifuzz
