#BEGIN_LEGAL
#
#Copyright (c) 2024 Intel Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#  
#END_LEGAL

name: External Sanity

defaults:
  run:
    shell: bash
env:
  BASH_ENV: "/tmp_proj/sde_admin/.bashrc_xed"

  # XED minimal python version requirement
  MIN_PY_VER: "3.8.17"
###########################################################

permissions: read-all
on:
  pull_request:
    branches:
      - external
  workflow_dispatch:

jobs:
  init:
    runs-on:
      - self-hosted
      - xed-runners
      - Linux
    outputs:
      test_matrix: ${{ steps.load_matrix.outputs.matrix }}
      coverity_matrix: ${{ steps.load_coverity_matrix.outputs.matrix }}
    steps:
      - name: Checkout xed for reusable actions
        uses: actions/checkout@v4
      - name: Set test matrix
        id: load_matrix
        uses: ./.github/actions/load-matrix
        with:
          matrix_kind: nightly
      - name: Set Coverity matrix
        id: load_coverity_matrix
        uses: ./.github/actions/load-matrix
        with:
          matrix_kind: coverity   

  test:
    needs: init
    strategy:
          fail-fast: false
          matrix: ${{fromJson(needs.init.outputs.test_matrix)}}
    runs-on:
      - self-hosted
      - xed-runners
      - ${{ matrix.os }}
    steps:
    - name: Checkout xed
      uses: actions/checkout@v4
      with:
        path: xed
    - name: Checkout mbuild
      uses: actions/checkout@v4
      with:
        repository: intelxed/mbuild
        ref: main
        path: mbuild
        token: ${{ secrets.PAT }}
    - name: test
      run: |
          cd xed
          python3 .github/scripts/sanity_external.py --compiler=${{matrix.compiler}} --version=${{matrix.ver}}

  test_min_python_version:
    needs: init
    runs-on:
      - self-hosted
      - xed-runners
      - Linux
    steps:
    - name: Checkout xed
      uses: actions/checkout@v4
      with:
        path: xed
    - name: Checkout mbuild
      uses: actions/checkout@v4
      with:
        repository: intelxed/mbuild
        ref: main
        path: mbuild
        token: ${{ secrets.PAT }}

    - uses: actions/setup-python@v5
      with:
        python-version: ${{env.MIN_PY_VER}}
    - name: Parse python version setup
      id: python_ver
      run: echo "version=$(python3 --version)" >> $GITHUB_OUTPUT      
    - name: 'Test ${{ steps.python_ver.outputs.version }}'
      run: |
        cd xed
        python3 .github/scripts/sanity_external.py

  # Malware scan
  anti_virus_scan:
    needs: init
    permissions: write-all
    runs-on:
      - self-hosted
      - xed-runners
      - Linux
    steps:
    - name: Checkout xed for reusable actions
      uses: actions/checkout@v4
    - name: Perform Anti-virus scan
      uses: ./.github/actions/antivirus-scan
      with:
          av_scan_path: ${{ secrets.AV_SCAN_PATH }}

  protex_scan:
    needs: init
    permissions: write-all
    runs-on:
      - self-hosted
      - xed-runners
      - Linux
    steps:
    - name: Checkout xed for reusable actions
      uses: actions/checkout@v4
    - name: Perform Protex scan
      uses: ./.github/actions/protex-scan
      with:
          bdstool_path: ${{ secrets.PROTEX_BDSTOOL_PATH }}
          username    : ${{ secrets.PROTEX_USERNAME     }}
          password    : ${{ secrets.PROTEX_PASSWORD     }}
          server      : ${{ secrets.PROTEX_SERVER_URL   }}
          proj_id     : ${{ secrets.PROTEX_PROJECT_ID   }}

  coverity_scan:
    needs: init
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.init.outputs.coverity_matrix)}}
    runs-on:
      - self-hosted
      - xed-runners
      - ${{ matrix.os }}
    outputs:
      Windows_cov_sum: ${{ steps.gen_coverity_sum.outputs.Windows_cov_sum }}
      Linux_cov_sum  : ${{ steps.gen_coverity_sum.outputs.Linux_cov_sum }}
    steps:
    - name: Checkout xed
      uses: actions/checkout@v4
      with:
          path: xed
    - name: Checkout mbuild
      uses: actions/checkout@v4
      with:
          repository: intelxed/mbuild
          ref: main
          path: mbuild
          token: ${{ secrets.PAT }}
    - name: Perform Coverity scan
      id: run_cov_scan
      uses: ./xed/.github/actions/coverity-scan
      with:
          linux_auth_key    : ${{secrets.COVERITY_AUTH_KEY_LINUX }}
          windows_auth_key  : ${{secrets.COVERITY_AUTH_KEY_WINDOWS }}
          os                : ${{ matrix.os }}
          compiler          : ${{ matrix.compiler }}
          version           : ${{ matrix.ver }}
          server            : ${{ secrets.COVERITY_SERVER_URL }}
          additional_knobs  : '--external'
    - name: Generate Coverity summary
      id: gen_coverity_sum
      run: |
          echo "${{matrix.os}}_cov_sum=${{ steps.run_cov_scan.outputs.cov_sum }}" >> $GITHUB_OUTPUT

  coverity_report:
    needs: [init, coverity_scan]
    permissions: write-all
    runs-on:
      - self-hosted
      - xed-runners
      - Windows
    steps:
    - name: Checkout xed for reusable actions
      uses: actions/checkout@v4
    - name: gen and upload reports
      uses: ./.github/actions/coverity-report
      with:
          auth_key: ${{ secrets.COVERITY_AUTH_KEY_WINDOWS }}
          username: ${{ secrets.COVERITY_USER }}
          server: ${{ secrets.COVERITY_SERVER_URL }}
          components: "CM-XED main.External"
    - name: add PR comment   # uploads coverity report summary as pull-request comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'   # add scan summary as comment only if there is a PR
      with:
        script: |
          const fs = require('fs');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "Linux Coverity scan: ${{needs.coverity_scan.outputs.Linux_cov_sum}}\n" +
                  "Windows Coverity scan: ${{needs.coverity_scan.outputs.Windows_cov_sum}}\n" +
                  "Please inspect Coverity CVSS and Security reports and validate passing SDL criteria."
          })
