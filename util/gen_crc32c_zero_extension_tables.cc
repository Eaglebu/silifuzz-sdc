// Copyright 2024 The SiliFuzz Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include <climits>
#include <cstddef>
#include <iostream>

#include "./util/crc32c_internal.h"

constexpr char kPrologue[] =
    R"prologue(// DO NOT EDIT. Generated by gen_crc32c_zero_extension_tables.
// Copyright 2024 The SiliFuzz Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstddef>

#include "./util/crc32c.h"

namespace silifuzz {
namespace internal {

const CRC32CZeroExtensionTable
  kCRC32CZeroExtensionTables[kNumCRC32CZeroExtensionTables] = {
)prologue";

constexpr char kEpilogue[] = R"epilogue(};

const CRC32CZeroExtensionTable& GetCRC32CZeroExtensionTableForBit(size_t i) {
  return kCRC32CZeroExtensionTables[i % kNumCRC32CZeroExtensionTables];
}

}  // namespace internal
}  // namespace silifuzz
)epilogue";

using silifuzz::internal::CRC32CZeroExtensionTable;

constexpr size_t kTableSize = sizeof(size_t) * CHAR_BIT;
CRC32CZeroExtensionTable Tables[kTableSize];

void PrintExtensionTable(const CRC32CZeroExtensionTable& t) {
  std::cout << "{ .n = " << t.n << "ULL ," << std::endl;
  std::cout << ".table = {" << std::endl;
  for (size_t group = 0; group < CRC32CZeroExtensionTable::kNumGroups;
       ++group) {
    std::cout << "{";
    for (size_t idx = 0; idx < CRC32CZeroExtensionTable::kGroupTableSize;
         ++idx) {
      std::cout << t.table[group][idx] << "UL, ";
    }
    std::cout << "}," << std::endl;
  }
  std::cout << "}, }";
}

int main() {
  std::cout << kPrologue;

  // Generate a series of extension tables by repeated doubling.
  Tables[0] = CRC32CZeroExtensionTable::One();
  for (size_t i = 1; i < kTableSize; ++i) {
    Tables[i] = CRC32CZeroExtensionTable::Add(Tables[i - 1], Tables[i - 1]);
  }

  // Print tables.
  std::cout << std::hex << std::showbase;
  for (size_t i = 0; i < kTableSize; ++i) {
    PrintExtensionTable(Tables[i]);
    std::cout << "," << std::endl;
  }

  std::cout << kEpilogue << std::endl;
  return 0;
}
